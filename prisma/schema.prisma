generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id
  clerkId      String   @unique @map("clerk_id")
  username     String   @unique
  email        String
  totalScore   Int      @default(0) @map("total_score")
  gamesPlayed  Int      @default(0) @map("games_played")
  gamesWon     Int      @default(0) @map("games_won")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  createdRooms     Room[]            @relation("RoomCreator")
  submissions      Submission[]
  wonGames         Room[]            @relation("GameWinner")
  roomParticipants RoomParticipant[]

  @@map("users")
}

model Room {
  id                   String    @id
  name                 String
  description          String?
  isPrivate            Boolean   @default(false) @map("is_private")
  joinCode             String?   @unique @map("join_code")
  maxPlayers           Int       @default(4) @map("max_players")
  status               String    @default("waiting") // waiting, in_progress, finished
  createdBy            String    @map("created_by")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")
  
  // Game fields (merged from Game model)
  challengeTitle       String?   @map("challenge_title")
  challengeDescription String?   @map("challenge_description")
  challengeExamples    String?   @map("challenge_examples")
  difficulty           String?   @default("medium")
  winnerId             String?   @map("winner_id")
  startedAt            DateTime? @map("started_at")
  endedAt              DateTime? @map("ended_at")
  durationSeconds      Int?      @map("duration_seconds")

  // Relations
  creator       User             @relation("RoomCreator", fields: [createdBy], references: [id])
  winner        User?            @relation("GameWinner", fields: [winnerId], references: [id])
  participants  RoomParticipant[]
  submissions   Submission[]

  @@map("rooms")
}

model Submission {
  id              String   @id
  roomId          String   @map("room_id")
  userId          String   @map("user_id")
  code            String
  language        String   @default("javascript")
  isCorrect       Boolean  @default(false) @map("is_correct")
  aiFeedback      String?  @map("ai_feedback")
  timeComplexity  String?  @map("time_complexity")
  spaceComplexity String?  @map("space_complexity")
  score           Int      @default(0)
  submittedAt     DateTime @default(now()) @map("submitted_at")

  // Relations
  room Room @relation(fields: [roomId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("submissions")
}

model RoomParticipant {
  id        String   @id @default(uuid())
  roomId    String   @map("room_id")
  userId    String   @map("user_id")
  joinedAt  DateTime @default(now()) @map("joined_at")

  // Relations
  room Room @relation(fields: [roomId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([roomId, userId])
  @@map("room_participants")
}
